// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_storage.go -package=mocks ./internal/storage Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/kamchatkin/practicum-shortener/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, key string) (models.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(models.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, key)
}

// GetBySource mocks base method.
func (m *MockStorage) GetBySource(ctx context.Context, key string) (models.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySource", ctx, key)
	ret0, _ := ret[0].(models.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySource indicates an expected call of GetBySource.
func (mr *MockStorageMockRecorder) GetBySource(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySource", reflect.TypeOf((*MockStorage)(nil).GetBySource), ctx, key)
}

// Incr mocks base method.
func (m *MockStorage) Incr() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Incr")
}

// Incr indicates an expected call of Incr.
func (mr *MockStorageMockRecorder) Incr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockStorage)(nil).Incr))
}

// IsUniqError mocks base method.
func (m *MockStorage) IsUniqError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUniqError indicates an expected call of IsUniqError.
func (mr *MockStorageMockRecorder) IsUniqError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqError", reflect.TypeOf((*MockStorage)(nil).IsUniqError), err)
}

// Open mocks base method.
func (m *MockStorage) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStorageMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStorage)(nil).Open))
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// RegisterUser mocks base method.
func (m *MockStorage) RegisterUser(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStorageMockRecorder) RegisterUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStorage)(nil).RegisterUser), ctx)
}

// Set mocks base method.
func (m *MockStorage) Set(ctx context.Context, key, value string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStorageMockRecorder) Set(ctx, key, value, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), ctx, key, value, userID)
}

// SetBatch mocks base method.
func (m *MockStorage) SetBatch(ctx context.Context, item map[string]string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBatch", ctx, item, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBatch indicates an expected call of SetBatch.
func (mr *MockStorageMockRecorder) SetBatch(ctx, item, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatch", reflect.TypeOf((*MockStorage)(nil).SetBatch), ctx, item, userID)
}

// UserAliases mocks base method.
func (m *MockStorage) UserAliases(ctx context.Context, userId int64) ([]*models.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAliases", ctx, userId)
	ret0, _ := ret[0].([]*models.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAliases indicates an expected call of UserAliases.
func (mr *MockStorageMockRecorder) UserAliases(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAliases", reflect.TypeOf((*MockStorage)(nil).UserAliases), ctx, userId)
}
